// Objective-C API for talking to github.com/ProtonMail/gopenpgp/v3/mobile Go package.
//   gobind -lang=objc github.com/ProtonMail/gopenpgp/v3/mobile
//
// File is generated by gobind. Do not edit.

#ifndef __Mobile_H__
#define __Mobile_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"

#include "Crypto.objc.h"

@class MobileDetachedSignaturePGPSplitReader;
@class MobileGo2AndroidReader;
@class MobileGo2IOSReader;
@class MobileKeyPacketSplitWriter;
@class MobileMobile2GoReader;
@class MobileMobile2GoWriter;
@class MobileMobile2GoWriterWithSHA256;
@class MobileMobileReadResult;
@protocol MobileMobileReader;
@class MobileMobileReader;

@protocol MobileMobileReader <NSObject>
- (MobileMobileReadResult* _Nullable)read:(long)max error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * DetachedSignaturePGPSplitReader implements the crypto.PGPSplitReader interface.
 */
@interface MobileDetachedSignaturePGPSplitReader : NSObject <goSeqRefInterface, CryptoPGPSplitReader, CryptoReader> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nullable instancetype)init:(NSData* _Nullable)keyPacket dataReader:(id<CryptoReader> _Nullable)dataReader encSignature:(CryptoPGPMessage* _Nullable)encSignature;
- (BOOL)read:(NSData* _Nullable)b n:(long* _Nullable)n error:(NSError* _Nullable* _Nullable)error;
- (id<CryptoReader> _Nullable)signature;
@end

/**
 * Go2AndroidReader is used to wrap a native golang Reader in the golang runtime,
to be usable in the android app runtime (via gomobile).
 */
@interface MobileGo2AndroidReader : NSObject <goSeqRefInterface, CryptoReader> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewGo2AndroidReader wraps a native golang Reader to be usable in the mobile app runtime (via gomobile).
It doesn't follow the standard golang Reader behavior, and returns n = -1 on EOF.
 */
- (nullable instancetype)init:(id<CryptoReader> _Nullable)reader;
/**
 * Read reads bytes into the provided buffer and returns the number of bytes read
It doesn't follow the standard golang Reader behavior, and returns n = -1 on EOF.
 */
- (BOOL)read:(NSData* _Nullable)b n:(long* _Nullable)n error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * Go2IOSReader is used to wrap a native golang Reader in the golang runtime,
to be usable in the iOS app runtime (via gomobile) as a MobileReader.
 */
@interface MobileGo2IOSReader : NSObject <goSeqRefInterface, MobileMobileReader> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewGo2IOSReader wraps a native golang Reader to be usable in the ios app runtime (via gomobile).
 */
- (nullable instancetype)init:(id<CryptoReader> _Nullable)reader;
/**
 * Read reads at most <max> bytes from the wrapped Reader and returns the read data as a MobileReadResult.
 */
- (MobileMobileReadResult* _Nullable)read:(long)max error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * KeyPacketSplitWriter implements the crypto.PGPSplitWriter interface
for splitting encryptions output into different packets.
Internally buffers the key packets and potential detached encrypted signatures.
 */
@interface MobileKeyPacketSplitWriter : NSObject <goSeqRefInterface, CryptoPGPSplitWriter, CryptoWriter> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nullable instancetype)init:(id<CryptoWriter> _Nullable)dataWriter;
/**
 * EncryptedDetachedSignature returns the internally buffered encrypted detached signature.
 */
- (CryptoPGPMessage* _Nullable)encryptedDetachedSignature;
/**
 * KeyPackets returns the internally buffered key packets.
 */
- (NSData* _Nullable)keyPackets;
- (id<CryptoWriter> _Nullable)keys;
- (id<CryptoWriter> _Nullable)signature;
- (BOOL)write:(NSData* _Nullable)b n:(long* _Nullable)n error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * Mobile2GoReader is used to wrap a MobileReader in the mobile app runtime,
to be usable in the golang runtime (via gomobile) as a native Reader.
 */
@interface MobileMobile2GoReader : NSObject <goSeqRefInterface, CryptoReader> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewMobile2GoReader wraps a MobileReader to be usable in the golang runtime (via gomobile).
 */
- (nullable instancetype)init:(id<MobileMobileReader> _Nullable)reader;
/**
 * Read reads data from the wrapped MobileReader and copies the read data in the provided buffer.
It also handles the conversion of EOF to an error.
 */
- (BOOL)read:(NSData* _Nullable)b n:(long* _Nullable)n error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * Mobile2GoWriter is used to wrap a writer in the mobile app runtime,
to be usable in the golang runtime (via gomobile).
 */
@interface MobileMobile2GoWriter : NSObject <goSeqRefInterface, CryptoWriter> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewMobile2GoWriter wraps a writer to be usable in the golang runtime (via gomobile).
 */
- (nullable instancetype)init:(id<CryptoWriter> _Nullable)writer;
/**
 * Write writes the data in the provided buffer in the wrapped writer.
It clones the provided data to prevent errors with garbage collectors.
 */
- (BOOL)write:(NSData* _Nullable)b n:(long* _Nullable)n error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * Mobile2GoWriterWithSHA256 is used to wrap a writer in the mobile app runtime,
to be usable in the golang runtime (via gomobile).
It also computes the SHA256 hash of the data being written on the fly.
 */
@interface MobileMobile2GoWriterWithSHA256 : NSObject <goSeqRefInterface, CryptoWriter> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewMobile2GoWriterWithSHA256 wraps a writer to be usable in the golang runtime (via gomobile).
The wrapper also computes the SHA256 hash of the data being written on the fly.
 */
- (nullable instancetype)init:(id<CryptoWriter> _Nullable)writer;
/**
 * GetSHA256 returns the SHA256 hash of the data that's been written so far.
 */
- (NSData* _Nullable)getSHA256;
/**
 * Write writes the data in the provided buffer in the wrapped writer.
It clones the provided data to prevent errors with garbage collectors.
It also computes the SHA256 hash of the data being written on the fly.
 */
- (BOOL)write:(NSData* _Nullable)b n:(long* _Nullable)n error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * MobileReadResult is what needs to be returned by MobileReader.Read.
The read data is passed as a return value rather than passed as an argument to the reader.
This avoids problems introduced by gomobile that prevent the use of native golang readers.
 */
@interface MobileMobileReadResult : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewMobileReadResult initialize a MobileReadResult with the correct values.
It clones the data to avoid the garbage collector freeing the data too early.
 */
- (nullable instancetype)init:(long)n eof:(BOOL)eof data:(NSData* _Nullable)data;
@property (nonatomic) long n;
@property (nonatomic) BOOL isEOF;
@property (nonatomic) NSData* _Nullable data;
@end

/**
 * FreeOSMemory can be used to explicitly
call the garbage collector and
return the unused memory to the OS.
 */
FOUNDATION_EXPORT void MobileFreeOSMemory(void);

FOUNDATION_EXPORT MobileDetachedSignaturePGPSplitReader* _Nullable MobileNewDetachedSignaturePGPSplitReader(NSData* _Nullable keyPacket, id<CryptoReader> _Nullable dataReader, CryptoPGPMessage* _Nullable encSignature);

/**
 * NewGo2AndroidReader wraps a native golang Reader to be usable in the mobile app runtime (via gomobile).
It doesn't follow the standard golang Reader behavior, and returns n = -1 on EOF.
 */
FOUNDATION_EXPORT MobileGo2AndroidReader* _Nullable MobileNewGo2AndroidReader(id<CryptoReader> _Nullable reader);

/**
 * NewGo2IOSReader wraps a native golang Reader to be usable in the ios app runtime (via gomobile).
 */
FOUNDATION_EXPORT MobileGo2IOSReader* _Nullable MobileNewGo2IOSReader(id<CryptoReader> _Nullable reader);

FOUNDATION_EXPORT MobileKeyPacketSplitWriter* _Nullable MobileNewKeyPacketSplitWriter(id<CryptoWriter> _Nullable dataWriter);

/**
 * NewMobile2GoReader wraps a MobileReader to be usable in the golang runtime (via gomobile).
 */
FOUNDATION_EXPORT MobileMobile2GoReader* _Nullable MobileNewMobile2GoReader(id<MobileMobileReader> _Nullable reader);

/**
 * NewMobile2GoWriter wraps a writer to be usable in the golang runtime (via gomobile).
 */
FOUNDATION_EXPORT MobileMobile2GoWriter* _Nullable MobileNewMobile2GoWriter(id<CryptoWriter> _Nullable writer);

/**
 * NewMobile2GoWriterWithSHA256 wraps a writer to be usable in the golang runtime (via gomobile).
The wrapper also computes the SHA256 hash of the data being written on the fly.
 */
FOUNDATION_EXPORT MobileMobile2GoWriterWithSHA256* _Nullable MobileNewMobile2GoWriterWithSHA256(id<CryptoWriter> _Nullable writer);

/**
 * NewMobileReadResult initialize a MobileReadResult with the correct values.
It clones the data to avoid the garbage collector freeing the data too early.
 */
FOUNDATION_EXPORT MobileMobileReadResult* _Nullable MobileNewMobileReadResult(long n, BOOL eof, NSData* _Nullable data);

@class MobileMobileReader;

/**
 * MobileReader is the interface that readers in the mobile runtime must use and implement.
This is a workaround to some of the gomobile limitations.
 */
@interface MobileMobileReader : NSObject <goSeqRefInterface, MobileMobileReader> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (MobileMobileReadResult* _Nullable)read:(long)max error:(NSError* _Nullable* _Nullable)error;
@end

#endif
